// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql" // This should match the provider you initialized with
  url      = env("DATABASE_URL") // This tells Prisma to get the URL from your .env file
}

// Standard NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // Added for query optimization
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Added for query optimization
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // OrElse specific fields
  stripeCustomerId     String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId String?   @unique @map("stripe_subscription_id") // ID of their active subscription
  stripePriceId        String?   @map("stripe_price_id")                // ID of the price they are subscribed to
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")   // When the current subscription period ends
  subscriptionStatus   String?   @map("subscription_status")
  
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relationships to OrElse core features (to be expanded later)
  goals                Goal[]
  suggestedElseActions ElseAction[] @relation("UserSuggestedElseActions") // Actions suggested by this user
  votes                UserElseActionVote[] @relation("UserVotes")        // Votes cast by this user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GoalStatus {
  ACTIVE    // Goal is currently active and deadline has not passed
  COMPLETED // User marked the goal as completed
  FAILED    // Deadline passed and goal was not marked completed
  // PENDING_CONSEQUENCE // User failed, and is now due for a consequence
  // CONSEQUENCE_SERVED // User completed the consequence
}

// Activated Goal Model
model Goal {
  id          String     @id @default(cuid())
  description String? // Your original schema had this as optional, matching it.
  deadline    DateTime
  isPublic    Boolean    @default(true)
  status      GoalStatus @default(ACTIVE) // Using the enum we defined
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade) // Removed `name: "UserGoals"` to use Prisma default, can be added back if needed.
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  elseActions ElseAction[] // Kept your placeholder for future relation

  @@index([authorId])
  @@index([status])
  @@index([deadline])
}

model ElseAction {
  id           String   @id @default(cuid())
  suggestion   String   @db.Text
  isMalicious Boolean  @default(false) // Flag for moderation (future use)
  goalId       String
  goal         Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  suggesterId  String
  suggester    User     @relation(fields: [suggesterId], references: [id], name: "UserSuggestedElseActions")
  isChosen     Boolean  @default(false) // True if this was the top voted "Else"
  voteCount   Int      @default(0) 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  votes UserElseActionVote[]
  
  @@index([goalId])
  @@index([suggesterId])
  @@index([voteCount]) // For ordering by votes
}

model UserElseActionVote {
  id String @id @default(cuid())

  userId       String
  user         User       @relation("UserVotes", fields: [userId], references: [id], onDelete: Cascade) // CORRECTED: Added relation name "UserVotes" and onDelete

  elseActionId String
  elseAction   ElseAction @relation(fields: [elseActionId], references: [id], onDelete: Cascade) // Added onDelete

  createdAt    DateTime   @default(now())

  @@unique([userId, elseActionId])
  @@index([elseActionId])
  @@index([userId])
}